[{"/Users/kis/Documents/GitHub/referral/frontend/src/App.tsx":"1","/Users/kis/Documents/GitHub/referral/frontend/src/screens/GuestHome/GuestHome.tsx":"2","/Users/kis/Documents/GitHub/referral/frontend/src/screens/GuestHome/Header.tsx":"3","/Users/kis/Documents/GitHub/referral/frontend/src/components/SearchBar/SearchBar.tsx":"4","/Users/kis/Documents/GitHub/referral/frontend/src/screens/JsHome/JsHome.tsx":"5","/Users/kis/Documents/GitHub/referral/frontend/src/reportWebVitals.ts":"6","/Users/kis/Documents/GitHub/referral/frontend/src/components/Card/ApplicationCard.tsx":"7","/Users/kis/Documents/GitHub/referral/frontend/src/index.tsx":"8","/Users/kis/Documents/GitHub/referral/frontend/src/screens/Search/Search.tsx":"9","/Users/kis/Documents/GitHub/referral/frontend/src/components/NavBar/NavBar.tsx":"10","/Users/kis/Documents/GitHub/referral/frontend/src/components/Card/Card.tsx":"11","/Users/kis/Documents/GitHub/referral/frontend/src/components/Footer/Footer.tsx":"12"},{"size":1095,"mtime":1612044597017,"results":"13","hashOfConfig":"14"},{"size":2589,"mtime":1611714335735,"results":"15","hashOfConfig":"14"},{"size":903,"mtime":1611714335735,"results":"16","hashOfConfig":"14"},{"size":1325,"mtime":1611714335692,"results":"17","hashOfConfig":"14"},{"size":6470,"mtime":1612044080038,"results":"18","hashOfConfig":"14"},{"size":425,"mtime":1611714335735,"results":"19","hashOfConfig":"14"},{"size":854,"mtime":1612169089886,"results":"20","hashOfConfig":"14"},{"size":500,"mtime":1611714335734,"results":"21","hashOfConfig":"14"},{"size":238,"mtime":1611714335737,"results":"22","hashOfConfig":"14"},{"size":3104,"mtime":1611714335691,"results":"23","hashOfConfig":"14"},{"size":929,"mtime":1611714335689,"results":"24","hashOfConfig":"14"},{"size":898,"mtime":1611714335690,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1avl3j4",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/Users/kis/Documents/GitHub/referral/frontend/src/App.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/screens/GuestHome/GuestHome.tsx",[],["54","55"],"/Users/kis/Documents/GitHub/referral/frontend/src/screens/GuestHome/Header.tsx",[],["56","57"],"/Users/kis/Documents/GitHub/referral/frontend/src/components/SearchBar/SearchBar.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/screens/JsHome/JsHome.tsx",["58","59","60","61","62","63"],"// TODO: 根据要求完成这个page\n// 你应该会需要用到 components 里面的 Card\nimport React from 'react';\n\n// screens and componets\nimport TweenOne from 'rc-tween-one';\nimport Footer from '../../components/Footer/Footer';\nimport Card from '../../components/Card/Card';\nimport ApplicationCard from '../../components/Card/ApplicationCard';\n\n// antd\nimport QueueAnim from 'rc-queue-anim';\nimport {Row, Col, Button,Divider} from 'antd';\n\n// assets (temp)\nimport MS_logo from '../../images/MS_logo.png';\nimport Avatar from '../../images/avatar.png';\n\nimport './styles/JsHome.less';\n\ninterface Props {\n\n}\n\ninterface CardData {\n    title: string,\n    company: string,\n    avatar: string,\n    logo: string,\n    name: string\n}\n\ninterface applicationData {\n    title: string,\n    logo: string,\n    name: string,\n    date: string\n}\n\n\n\nconst RenderCards: React.FC<CardData[]> = (cardsData: CardData[]) => {\n    return (\n        <div className='home-cards-wrapper'>\n\n                <div className='home-cards-title'>\n                    <h1 className='home-cards-title-h1'>Positions you might be interested in</h1>\n                </div>\n                <Row justify='space-between'>\n                    {cardsData.map((item: CardData, i: number) => (\n                        <Col md={6} xs={24} className='home-card-block' key={i.toString()}>\n                            <Card\n                                title={item.title}\n                                company={item.company}\n                                logo={item.logo}\n                                avatar={item.avatar}\n                                name={item.name}\n                            />\n                        </Col>\n                    ))}\n                </Row>\n\n        </div>\n    )\n}\n\n// title: string,\n//     avatar: string,\n//     logo: string,\n//     name: string,\n//     date: string\n\nconst RenderApplicationCards: React.FC<applicationData[]> = (cardsData: applicationData[]) => {\n    return (\n        <div className='application-cards-wrapper'>\n\n            <Row justify='space-between' gutter={[16,16]}>\n                {cardsData.map((item: applicationData, i: number) => (\n                    <Col md={12} xs={24} className='home-card-block' key={i.toString()}>\n                        <ApplicationCard\n                            title={item.title}\n                            logo={item.logo}\n                            name={item.name}\n                            date={item.date}\n                        />\n                    </Col>\n                ))}\n            </Row>\n\n        </div>\n    )\n}\n\n\n\nconst JsHome: React.FC<Props> = (props: Props) => {\n    const [renderdata, setrenderdata] = React.useState(sentCardData);\n    const [underlineButton, setUnderlineButton] = React.useState(1);\n\n    return (\n        <div className='home-wrapper'>\n            <div className='home-content-wrapper'>\n\n                <TweenOne\n                    animation={{ x: -200, type: 'from', ease: 'easeOutQuad' }}\n                >\n                    {RenderCards(referralCardData)}\n\n                        <div className='home-cards-title'>\n                            <h1 className='home-cards-title-h1' >Your Applications</h1>\n                        </div>\n                        <div className='application-button-row'>\n                        <Row justify='start'>\n                            <Col>\n                              <div className='application-button'\n                                style={{textDecoration: underlineButton==1 ? 'underline' : 'none'}}\n                                onClick={() => {\n                                  setrenderdata(sentCardData);\n                                  setUnderlineButton(1);\n                                }}>\n                              Sent\n                              </div>\n                            </Col>\n\n                            <Col>\n                              <div className='application-button'\n                                style={{textDecoration: underlineButton==2 ? 'underline' : 'none'}}\n                                onClick={() => {\n                                  setrenderdata(viewedCardData);\n                                  setUnderlineButton(2);\n                                }}>\n                              Viewed\n                              </div>\n                            </Col>\n\n                            <Col>\n                              <div className='application-button'\n                                style={{textDecoration: underlineButton==3 ? 'underline' : 'none'}}\n                                onClick={() => {\n                                  setrenderdata(acceptedCardData);\n                                  setUnderlineButton(3);\n                                }}>\n                              Accepted\n                              </div>\n                            </Col>\n                        </Row>\n                        </div>\n                    {RenderApplicationCards(renderdata)}\n\n                </TweenOne>\n            </div>\n            <Footer />\n        </div>\n    )\n}\n\n// dummy data for \"get referral cards\"\nconst referralCardData: CardData[] = [];\nfor (let ii = 0; ii < 3; ii++) {\n    referralCardData.push(\n        {\n            title: 'Design Positions',\n            company: 'Microsoft',\n            name: 'referer 1',\n            logo: MS_logo,\n            avatar: Avatar\n        }\n    )\n}\n\n// interface applicationData {\n//     title: string,\n//     avatar: string,\n//     logo: string,\n//     name: string,\n//     date: string\n// }\n\n// dummy data for sent:\nconst sentCardData: applicationData[] = [];\nfor (let ii = 0; ii < 2; ii++) {\n    sentCardData.push(\n        {\n            title: 'Frontend Engineer',\n            logo: MS_logo,\n            name: 'referer 2',\n            date: 'Jan 23'\n\n        }\n    )\n}\n// dummy data for viewed:\nconst viewedCardData: applicationData[] = [];\nfor (let ii = 0; ii < 3; ii++) {\n    viewedCardData.push(\n        {\n            title: 'Software Engineer',\n            logo: MS_logo,\n            name: 'referer 1',\n            date: 'Jan 23'\n        }\n    )\n}\n// dummy data for accepted:\nconst acceptedCardData: applicationData[] = [];\nfor (let ii = 0; ii < 4; ii++) {\n    acceptedCardData.push(\n        {\n            title: 'Software Engineer',\n            logo: MS_logo,\n            name: 'referer 3',\n            date: 'Jan 23'\n        }\n    )\n}\n\n\n\nexport default JsHome;\n",["64","65"],"/Users/kis/Documents/GitHub/referral/frontend/src/reportWebVitals.ts",[],"/Users/kis/Documents/GitHub/referral/frontend/src/components/Card/ApplicationCard.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/index.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/screens/Search/Search.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/components/NavBar/NavBar.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/components/Card/Card.tsx",[],"/Users/kis/Documents/GitHub/referral/frontend/src/components/Footer/Footer.tsx",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":12,"column":8,"nodeType":"74","messageId":"75","endLine":12,"endColumn":17},{"ruleId":"72","severity":1,"message":"76","line":13,"column":19,"nodeType":"74","messageId":"75","endLine":13,"endColumn":25},{"ruleId":"72","severity":1,"message":"77","line":13,"column":26,"nodeType":"74","messageId":"75","endLine":13,"endColumn":33},{"ruleId":"78","severity":1,"message":"79","line":116,"column":72,"nodeType":"80","messageId":"81","endLine":116,"endColumn":74},{"ruleId":"78","severity":1,"message":"79","line":127,"column":72,"nodeType":"80","messageId":"81","endLine":127,"endColumn":74},{"ruleId":"78","severity":1,"message":"79","line":138,"column":72,"nodeType":"80","messageId":"81","endLine":138,"endColumn":74},{"ruleId":"66","replacedBy":"82"},{"ruleId":"68","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],["84"],["85"],"@typescript-eslint/no-unused-vars","'QueueAnim' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Divider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["84"],["85"],"no-global-assign","no-unsafe-negation"]